Stores 38 number values each with its own address
Current implementation uses four external variables for read/write, and one to store each chip's ID, and one to store the number of chips in the multichip array.
Can be modified to only use three external variables for read/write operations
Pauses automatically after each access, regardless of wether the variable at the address specified is on the particular chip or not

Used variables:
 - CW: Shorthand for ChipWait, be sure to rename that field of the chips to something thats unique to each chip
 - WVar / W: value to write on a write command
 - RDVar / R: value the chip writes to on a read command, read this from the caller
 - Address / A: index to be read/written to
 - RD: if true (non-0) read address, if false, write to address
 - first/f / second/s: since each line stores two variables, these are used to access the appropriate one
 - var[number]: internal variable used to store data
 - Id / I[single digit number]: Chip ID stored as external variable, it is used to tell if a variable at the supplied address is stored at that chip
 - NrChips: Number of the chips in the multichip array

Readable version:

Line 1: wVar=:WVar address=:Address-:Id if address%:NrChips then --:ChipWait goto 1 end address/=:NrChips first=address%2 second=1-first goto address+2
Line 2: --:ChipWait if :RD then :RDVar=first*var0+second*var1 else var0=second*var0+first*wVar var1=first*var1+second*wVar end goto 1
......... //each line is the same as line two with the exception of the storage variables (var[number])
Line 20: --:ChipWait if :RD then :RDVar=first*var36+second*var37 else var36=second*var36+first*wVar var37=first*var37+second*wVar end goto 1

70 Characters / line version:

Line1: w=:W a=:A-:I0 if a%:N then --:CW goto 1 end a/=:N f=a%2 s=1-f goto a+2
Line2: --:CW if :RD then :R=f*v0+s*v1 else v0=s*v0+f*w v1=f*v1+s*w end goto 1
....
Line6: --:CW if :RD then :R=f*v8+s*v9 else v8=s*v8+f*w v9=f*v9+s*w end goto 1
Line7: --:CW if :RD then :R=f*x0+s*x1 else x0=s*x0+f*w x1=f*x1+s*w end goto 1
....
Line11: --:CW if :RD then :R=f*x8+s*x9 else x8=s*x8+f*w x9=f*x9+s*w end goto 1
Line12: --:CW if :RD then :R=f*y0+s*y1 else y0=s*y0+f*w y1=f*y1+s*w end goto 1
....
Line16: --:CW if :RD then :R=f*y8+s*y9 else y8=s*y8+f*w y9=f*y9+s*w end goto 1
Line17: --:CW if :RD then :R=f*z0+s*z1 else z0=s*z0+f*w z1=f*z1+s*w end goto 1
....
Line20: --:CW if :RD then :R=f*v6+s*v7 else v6=s*v6+f*w v7=f*v7+s*w end goto 1
